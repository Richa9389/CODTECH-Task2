import sqlite3
from tkinter import Tk, Label, Entry, Button, Listbox, messagebox

# Database setup
def setup_database():
    conn = sqlite3.connect("inventory.db")
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS products (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        name TEXT NOT NULL,
                        quantity INTEGER NOT NULL,
                        price REAL NOT NULL)''')
    conn.commit()
    conn.close()

# Functions for inventory management
def add_product():
    name = name_entry.get()
    quantity = quantity_entry.get()
    price = price_entry.get()

    if not name or not quantity or not price:
        messagebox.showerror("Error", "All fields are required.")
        return

    try:
        quantity = int(quantity)
        price = float(price)
    except ValueError:
        messagebox.showerror("Error", "Quantity must be an integer and price must be a number.")
        return

    conn = sqlite3.connect("inventory.db")
    cursor = conn.cursor()
    cursor.execute("INSERT INTO products (name, quantity, price) VALUES (?, ?, ?)", (name, quantity, price))
    conn.commit()
    conn.close()

    messagebox.showinfo("Success", "Product added successfully.")
    clear_entries()
    refresh_inventory()

def delete_product():
    selected = inventory_listbox.curselection()
    if not selected:
        messagebox.showerror("Error", "No product selected.")
        return

    product_id = inventory_listbox.get(selected[0]).split()[0]

    conn = sqlite3.connect("inventory.db")
    cursor = conn.cursor()
    cursor.execute("DELETE FROM products WHERE id = ?", (product_id,))
    conn.commit()
    conn.close()

    messagebox.showinfo("Success", "Product deleted successfully.")
    refresh_inventory()

def refresh_inventory():
    inventory_listbox.delete(0, 'end')
    conn = sqlite3.connect("inventory.db")
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM products")
    for row in cursor.fetchall():
        inventory_listbox.insert('end', f"{row[0]} {row[1]} - {row[2]} units @ ${row[3]:.2f}")
    conn.close()

def clear_entries():
    name_entry.delete(0, 'end')
    quantity_entry.delete(0, 'end')
    price_entry.delete(0, 'end')

# GUI setup
setup_database()
root = Tk()
root.title("Inventory Management System")

Label(root, text="Product Name:").grid(row=0, column=0)
name_entry = Entry(root)
name_entry.grid(row=0, column=1)

Label(root, text="Quantity:").grid(row=1, column=0)
quantity_entry = Entry(root)
quantity_entry.grid(row=1, column=1)

Label(root, text="Price:").grid(row=2, column=0)
price_entry = Entry(root)
price_entry.grid(row=2, column=1)

Button(root, text="Add Product", command=add_product).grid(row=3, column=0, pady=5)
Button(root, text="Delete Product", command=delete_product).grid(row=3, column=1, pady=5)

inventory_listbox = Listbox(root, width=50)
inventory_listbox.grid(row=4, column=0, columnspan=2)

refresh_inventory()

root.mainloop()
